---
services:
  #
  # KAFKA CONNECT
  #
  postgres:
    image: postgres:latest
    container_name: postgres
    ports: [5432:5432]
    environment:
      POSTGRES_PASSWORD: mysecretpassword
    volumes:
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: |
      postgres 
      -c wal_level=logical
      -c max_wal_senders=1
      -c max_replication_slots=1
  #
  # KAFKA BROKER
  # 
  kafka:
    image: apache/kafka:latest
    container_name: kafka
    user: root
    ports: [9092:9092, 9093:9093]
    # volumes: [kafka_data:/tmp/kafka-logs]
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: INTERNAL://:29092,CONTROLLER://:9093,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LOG_DIRS: /tmp/kafka-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CLUSTER_ID: ciWo7IWazngRchmPES6q5A
  #
  # KAFKA CONNECT
  #
  connect:
    image: confluentinc/cp-kafka-connect-base
    container_name: connect
    ports: [8083:8083]
    volumes: [./connect/plugins:/opt/kafka/plugins]
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_REST_PORT: 8082
      CONNECT_GROUP_ID: '1'
      CONNECT_CONFIG_STORAGE_TOPIC: config
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafâˆška.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_PLUGIN_PATH: /opt/kafka/plugins
    depends_on:
      - kafka
  #
  # INIT CONNECTORS
  #
  init-connectors:
    image: curlimages/curl:latest
    container_name: init-connectors
    depends_on: [connect]
    volumes: [./connect/connectors/:/scripts]
    command: >
      sh -c "
        chmod +x /scripts/init-connectors.sh &&
        /scripts/init-connectors.sh
      "
  #
  # CLICKHOUSE TARGET DWH
  #
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    ports: [9000:9000, 8123:8123]
    environment:
      CLICKHOUSE_PASSWORD: mysecretpassword
    volumes: [./clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql]
  # spark-iceberg:
  #   image: tabulario/spark-iceberg
  #   container_name: spark-iceberg
  #   build: spark/
  #   networks:
  #     iceberg_net:
  #   depends_on: [rest, minio]
  #   volumes:
  #     - ./warehouse:/home/iceberg/warehouse
  #     - ./notebooks:/home/iceberg/notebooks/notebooks
  #   environment:
  #     - AWS_ACCESS_KEY_ID=admin
  #     - AWS_SECRET_ACCESS_KEY=password
  #     - AWS_REGION=us-east-1
  #   ports: [8888:8888, 8080:8080, 10000:10000, 10001:10001]
  # rest:
  #   image: apache/iceberg-rest-fixture
  #   container_name: iceberg-rest
  #   networks:
  #     iceberg_net:
  #   ports: [8181:8181]
  #   environment:
  #     - AWS_ACCESS_KEY_ID=admin
  #     - AWS_SECRET_ACCESS_KEY=password
  #     - AWS_REGION=us-east-1
  #     - CATALOG_WAREHOUSE=s3://warehouse/
  #     - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
  #     - CATALOG_S3_ENDPOINT=http://minio:9000
  # minio:
  #   image: minio/minio
  #   container_name: minio
  #   environment:
  #     - MINIO_ROOT_USER=admin
  #     - MINIO_ROOT_PASSWORD=password
  #     - MINIO_DOMAIN=minio
  #   networks:
  #     iceberg_net:
  #       aliases: [warehouse.minio]
  #   ports: [9001:9001, 9000:9000]
  #   command: [server, /data, --console-address, :9001]
  # mc:
  #   depends_on: [minio]
  #   image: minio/mc
  #   container_name: mc
  #   networks:
  #     iceberg_net:
  #   environment:
  #     - AWS_ACCESS_KEY_ID=admin
  #     - AWS_SECRET_ACCESS_KEY=password
  #     - AWS_REGION=us-east-1
  #   entrypoint: |
  #     /bin/sh -c "
  #     until (/usr/bin/mc alias set minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
  #     /usr/bin/mc rm -r --force minio/warehouse;
  #     /usr/bin/mc mb minio/warehouse;
  #     /usr/bin/mc policy set public minio/warehouse;
  #     tail -f /dev/null
  #     "
# networks:
#   iceberg_net:
# volumes:
#   kafka_data:
#     driver: local
